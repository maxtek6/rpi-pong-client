// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PONGDATA_RPICLOUDPONG_H_
#define FLATBUFFERS_GENERATED_PONGDATA_RPICLOUDPONG_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace rpiCloudPong {

struct ball_properties;
struct ball_propertiesBuilder;

struct paddle_properties;
struct paddle_propertiesBuilder;

struct game_properties;
struct game_propertiesBuilder;

struct ball_properties FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ball_propertiesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X_POS = 4,
    VT_Y_POS = 6
  };
  int16_t x_pos() const {
    return GetField<int16_t>(VT_X_POS, 0);
  }
  int16_t y_pos() const {
    return GetField<int16_t>(VT_Y_POS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X_POS, 2) &&
           VerifyField<int16_t>(verifier, VT_Y_POS, 2) &&
           verifier.EndTable();
  }
};

struct ball_propertiesBuilder {
  typedef ball_properties Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x_pos(int16_t x_pos) {
    fbb_.AddElement<int16_t>(ball_properties::VT_X_POS, x_pos, 0);
  }
  void add_y_pos(int16_t y_pos) {
    fbb_.AddElement<int16_t>(ball_properties::VT_Y_POS, y_pos, 0);
  }
  explicit ball_propertiesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ball_properties> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ball_properties>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ball_properties> Createball_properties(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x_pos = 0,
    int16_t y_pos = 0) {
  ball_propertiesBuilder builder_(_fbb);
  builder_.add_y_pos(y_pos);
  builder_.add_x_pos(x_pos);
  return builder_.Finish();
}

struct paddle_properties FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef paddle_propertiesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X_POS = 4,
    VT_Y_POS = 6
  };
  int16_t x_pos() const {
    return GetField<int16_t>(VT_X_POS, 0);
  }
  int16_t y_pos() const {
    return GetField<int16_t>(VT_Y_POS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X_POS, 2) &&
           VerifyField<int16_t>(verifier, VT_Y_POS, 2) &&
           verifier.EndTable();
  }
};

struct paddle_propertiesBuilder {
  typedef paddle_properties Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x_pos(int16_t x_pos) {
    fbb_.AddElement<int16_t>(paddle_properties::VT_X_POS, x_pos, 0);
  }
  void add_y_pos(int16_t y_pos) {
    fbb_.AddElement<int16_t>(paddle_properties::VT_Y_POS, y_pos, 0);
  }
  explicit paddle_propertiesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<paddle_properties> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<paddle_properties>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<paddle_properties> Createpaddle_properties(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x_pos = 0,
    int16_t y_pos = 0) {
  paddle_propertiesBuilder builder_(_fbb);
  builder_.add_y_pos(y_pos);
  builder_.add_x_pos(x_pos);
  return builder_.Finish();
}

struct game_properties FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef game_propertiesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PADDLES = 4,
    VT_BALL = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<rpiCloudPong::paddle_properties>> *paddles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<rpiCloudPong::paddle_properties>> *>(VT_PADDLES);
  }
  const rpiCloudPong::ball_properties *ball() const {
    return GetPointer<const rpiCloudPong::ball_properties *>(VT_BALL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PADDLES) &&
           verifier.VerifyVector(paddles()) &&
           verifier.VerifyVectorOfTables(paddles()) &&
           VerifyOffset(verifier, VT_BALL) &&
           verifier.VerifyTable(ball()) &&
           verifier.EndTable();
  }
};

struct game_propertiesBuilder {
  typedef game_properties Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_paddles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<rpiCloudPong::paddle_properties>>> paddles) {
    fbb_.AddOffset(game_properties::VT_PADDLES, paddles);
  }
  void add_ball(::flatbuffers::Offset<rpiCloudPong::ball_properties> ball) {
    fbb_.AddOffset(game_properties::VT_BALL, ball);
  }
  explicit game_propertiesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<game_properties> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<game_properties>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<game_properties> Creategame_properties(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<rpiCloudPong::paddle_properties>>> paddles = 0,
    ::flatbuffers::Offset<rpiCloudPong::ball_properties> ball = 0) {
  game_propertiesBuilder builder_(_fbb);
  builder_.add_ball(ball);
  builder_.add_paddles(paddles);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<game_properties> Creategame_propertiesDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<rpiCloudPong::paddle_properties>> *paddles = nullptr,
    ::flatbuffers::Offset<rpiCloudPong::ball_properties> ball = 0) {
  auto paddles__ = paddles ? _fbb.CreateVector<::flatbuffers::Offset<rpiCloudPong::paddle_properties>>(*paddles) : 0;
  return rpiCloudPong::Creategame_properties(
      _fbb,
      paddles__,
      ball);
}

inline const rpiCloudPong::game_properties *Getgame_properties(const void *buf) {
  return ::flatbuffers::GetRoot<rpiCloudPong::game_properties>(buf);
}

inline const rpiCloudPong::game_properties *GetSizePrefixedgame_properties(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<rpiCloudPong::game_properties>(buf);
}

inline bool Verifygame_propertiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rpiCloudPong::game_properties>(nullptr);
}

inline bool VerifySizePrefixedgame_propertiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rpiCloudPong::game_properties>(nullptr);
}

inline void Finishgame_propertiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rpiCloudPong::game_properties> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedgame_propertiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rpiCloudPong::game_properties> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace rpiCloudPong

#endif  // FLATBUFFERS_GENERATED_PONGDATA_RPICLOUDPONG_H_
