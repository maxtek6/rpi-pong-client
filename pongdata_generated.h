// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PONGDATA_RPICLOUDPONG_H_
#define FLATBUFFERS_GENERATED_PONGDATA_RPICLOUDPONG_H_

#include "flatbuffers/flatbuffers.h"

namespace rpiCloudPong {

struct ball_properties;
struct ball_propertiesBuilder;

struct paddle_properties;
struct paddle_propertiesBuilder;

struct ball_properties FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ball_propertiesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X_POS = 4,
    VT_Y_POS = 6
  };
  int16_t x_pos() const {
    return GetField<int16_t>(VT_X_POS, 0);
  }
  int16_t y_pos() const {
    return GetField<int16_t>(VT_Y_POS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X_POS) &&
           VerifyField<int16_t>(verifier, VT_Y_POS) &&
           verifier.EndTable();
  }
};

struct ball_propertiesBuilder {
  typedef ball_properties Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x_pos(int16_t x_pos) {
    fbb_.AddElement<int16_t>(ball_properties::VT_X_POS, x_pos, 0);
  }
  void add_y_pos(int16_t y_pos) {
    fbb_.AddElement<int16_t>(ball_properties::VT_Y_POS, y_pos, 0);
  }
  explicit ball_propertiesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ball_properties> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ball_properties>(end);
    return o;
  }
};

inline flatbuffers::Offset<ball_properties> Createball_properties(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x_pos = 0,
    int16_t y_pos = 0) {
  ball_propertiesBuilder builder_(_fbb);
  builder_.add_y_pos(y_pos);
  builder_.add_x_pos(x_pos);
  return builder_.Finish();
}

struct paddle_properties FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef paddle_propertiesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X_POS = 4,
    VT_Y_POS = 6
  };
  int16_t x_pos() const {
    return GetField<int16_t>(VT_X_POS, 0);
  }
  int16_t y_pos() const {
    return GetField<int16_t>(VT_Y_POS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X_POS) &&
           VerifyField<int16_t>(verifier, VT_Y_POS) &&
           verifier.EndTable();
  }
};

struct paddle_propertiesBuilder {
  typedef paddle_properties Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x_pos(int16_t x_pos) {
    fbb_.AddElement<int16_t>(paddle_properties::VT_X_POS, x_pos, 0);
  }
  void add_y_pos(int16_t y_pos) {
    fbb_.AddElement<int16_t>(paddle_properties::VT_Y_POS, y_pos, 0);
  }
  explicit paddle_propertiesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<paddle_properties> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<paddle_properties>(end);
    return o;
  }
};

inline flatbuffers::Offset<paddle_properties> Createpaddle_properties(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x_pos = 0,
    int16_t y_pos = 0) {
  paddle_propertiesBuilder builder_(_fbb);
  builder_.add_y_pos(y_pos);
  builder_.add_x_pos(x_pos);
  return builder_.Finish();
}

}  // namespace rpiCloudPong

#endif  // FLATBUFFERS_GENERATED_PONGDATA_RPICLOUDPONG_H_
